# -*- coding: utf-8 -*-
"""Building_cracking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CzLZWFDyxR0PbhTWg3MT4kHyXNmNIZ8r
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np

!pip install skillsnetwork

import skillsnetwork

from keras.preprocessing.image import ImageDataGenerator

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.applications import ResNet50
from keras.applications.vgg16 import VGG16
from keras.applications.resnet50 import preprocess_input

## get the data
await skillsnetwork.prepare("https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DL0321EN/data/concrete_data_week4.zip", overwrite=True)

num_classes = 2

image_resize = 224

batch_size_training = 100
batch_size_validation = 100

data_generator = ImageDataGenerator(
    preprocessing_function=preprocess_input,
)

train_generator = data_generator.flow_from_directory(
    'concrete_data_week4/train',
    target_size=(image_resize, image_resize),
    batch_size=batch_size_training,
    class_mode='categorical')

## Type your answer here
valid_generator = data_generator.flow_from_directory(
    'concrete_data_week4/valid',
    target_size=(image_resize, image_resize),
    batch_size=batch_size_validation,
    class_mode='categorical')

## Type your answer here
test_generator = data_generator.flow_from_directory(
    'concrete_data_week4/test',
    target_size=(image_resize, image_resize),
    batch_size=batch_size_validation,
    class_mode='categorical')

model = Sequential()
model.add(ResNet50(
    include_top=False,
    pooling='avg',
    weights='imagenet',
    ))
model.add(Dense(num_classes, activation='softmax'))

model.layers
model.layers[0].trainable = False
model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

steps_per_epoch_training = len(train_generator)
steps_per_epoch_validation = len(valid_generator)
print(steps_per_epoch_training)
num_epochs = 2
fit_history = model.fit_generator(
    train_generator,
    steps_per_epoch=steps_per_epoch_training,
    epochs=num_epochs,
    validation_data=valid_generator,
    validation_steps=steps_per_epoch_validation,
    verbose=1,
)
model.save('/content/drive/My Drive/CNN folder/classifier_resnet_model.h5')

# Create a Sequential model
model_VGG = Sequential()

# Replace ResNet50 with VGG16
model_VGG.add(VGG16(
    include_top=False,
    pooling='avg',
    weights='imagenet',
))

# Add a Dense layer with softmax activation for the output layer
model_VGG.add(Dense(num_classes, activation='softmax'))

steps_per_epoch_training = len(train_generator)
steps_per_epoch_validation = len(valid_generator)
print(steps_per_epoch_training)
num_epochs = 3
model_VGG.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
fit_history = model_VGG.fit_generator(
    train_generator,
    steps_per_epoch=steps_per_epoch_training,
    epochs=num_epochs,
    validation_data=valid_generator,
    validation_steps=steps_per_epoch_validation,
    verbose=1,
)
model_VGG.save('/content/drive/My Drive/CNN folder/cracking/classifier_resnet_model.h5')

# Evaluate models using evaluate_generator
vgg16_performance = model_VGG.evaluate_generator(test_generator)
resnet50_performance =model.evaluate_generator(test_generator)

# Print the performance of the classifier using VGG16
print("Performance of the VGG16 model:")
print("Loss:", vgg16_performance[0])
print("Accuracy:", vgg16_performance[1])

# Print the performance of the classifier using ResNet50
print("\nPerformance of the ResNet50 model:")
print("Loss:", resnet50_performance[0])
print("Accuracy:", resnet50_performance[1])

# Assuming you have the test_data_dir, target_size, test_datagen, and test_generator defined from the previous part

# Predict class probabilities for the test set using VGG16 model
vgg16_predictions = model_VGG.predict_generator(test_generator)

# Predict class probabilities for the test set using ResNet50 model
resnet50_predictions = model.predict_generator(test_generator)

# Get class predictions for the first five images using argmax
vgg16_class_predictions = np.argmax(vgg16_predictions[:5], axis=1)
resnet50_class_predictions = np.argmax(resnet50_predictions[:5], axis=1)

# Define a mapping for class labels (adjust based on your specific case)
class_labels = {0: 'Negative', 1: 'Positive'}

# Report class predictions for the first five images
print("VGG16 Class Predictions:")
for prediction in vgg16_class_predictions:
    print(class_labels[prediction])

print("\nResNet50 Class Predictions:")
for prediction in resnet50_class_predictions:
    print(class_labels[prediction])